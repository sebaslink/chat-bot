#!/usr/bin/env python3
"""
Script de verificaci√≥n de instalaci√≥n
Verifica que no haya archivos duplicados y que la configuraci√≥n sea correcta
"""

import os
import sys
from pathlib import Path

def mostrar_banner():
    """Mostrar banner del script"""
    print("=" * 60)
    print("üîç VERIFICADOR DE INSTALACI√ìN")
    print("=" * 60)
    print("Este script verifica que la instalaci√≥n sea correcta")
    print("y que no haya archivos duplicados que generen conflictos.")
    print("=" * 60)

def verificar_archivos_principales():
    """Verificar archivos principales del sistema"""
    print("\nüìÅ Verificando archivos principales...")
    
    archivos_requeridos = [
        "SISTEMA_UNIFICADO_FINAL.py",
        "requirements.txt",
        "configurar_credenciales.py",
        "instalar_en_nueva_computadora.py"
    ]
    
    archivos_faltantes = []
    for archivo in archivos_requeridos:
        if os.path.exists(archivo):
            print(f"   ‚úÖ {archivo}")
        else:
            print(f"   ‚ùå {archivo} - FALTANTE")
            archivos_faltantes.append(archivo)
    
    return len(archivos_faltantes) == 0

def verificar_directorios():
    """Verificar directorios principales"""
    print("\nüìÇ Verificando directorios...")
    
    directorios_requeridos = [
        "CHATMASIVO",
        "templates",
        "static",
        "data",
        "CHATMASIVO/config",
        "CHATMASIVO/config/twilio",
        "CHATMASIVO/config/app"
    ]
    
    directorios_faltantes = []
    for directorio in directorios_requeridos:
        if os.path.exists(directorio):
            print(f"   ‚úÖ {directorio}")
        else:
            print(f"   ‚ùå {directorio} - FALTANTE")
            directorios_faltantes.append(directorio)
    
    return len(directorios_faltantes) == 0

def verificar_archivos_duplicados():
    """Verificar archivos duplicados que puedan generar conflictos"""
    print("\nüîç Verificando archivos duplicados...")
    
    archivos_duplicados = [
        "CHATMASIVO/config/twilio.env",
        "ChatbotInteligente_v1.0/CHATMASIVO/config/twilio.env",
        "railway_deploy/CHATMASIVO/config/twilio.env"
    ]
    
    duplicados_encontrados = []
    for archivo in archivos_duplicados:
        if os.path.exists(archivo):
            print(f"   ‚ö†Ô∏è  {archivo} - DUPLICADO (deber√≠a eliminarse)")
            duplicados_encontrados.append(archivo)
        else:
            print(f"   ‚úÖ {archivo} - OK (no existe)")
    
    return len(duplicados_encontrados) == 0

def verificar_archivos_configuracion():
    """Verificar archivos de configuraci√≥n"""
    print("\n‚öôÔ∏è  Verificando archivos de configuraci√≥n...")
    
    archivos_config = [
        ".env",
        "CHATMASIVO/config/twilio/Twilio.env",
        "CHATMASIVO/config/app/Twilio.env",
        "CHATMASIVO/config/twilio/Twilio.env.example",
        "CHATMASIVO/config/app/Twilio.env.example"
    ]
    
    configs_encontrados = []
    for archivo in archivos_config:
        if os.path.exists(archivo):
            print(f"   ‚úÖ {archivo}")
            configs_encontrados.append(archivo)
        else:
            print(f"   ‚ö†Ô∏è  {archivo} - No encontrado")
    
    return len(configs_encontrados) > 0

def verificar_dependencias():
    """Verificar dependencias de Python"""
    print("\nüì¶ Verificando dependencias...")
    
    try:
        import flask
        print("   ‚úÖ Flask")
    except ImportError:
        print("   ‚ùå Flask - NO INSTALADO")
        return False
    
    try:
        import sqlite3
        print("   ‚úÖ SQLite3")
    except ImportError:
        print("   ‚ùå SQLite3 - NO INSTALADO")
        return False
    
    try:
        import pandas
        print("   ‚úÖ Pandas")
    except ImportError:
        print("   ‚ö†Ô∏è  Pandas - NO INSTALADO (opcional)")
    
    try:
        import openpyxl
        print("   ‚úÖ OpenPyXL")
    except ImportError:
        print("   ‚ö†Ô∏è  OpenPyXL - NO INSTALADO (opcional)")
    
    return True

def verificar_credenciales():
    """Verificar configuraci√≥n de credenciales"""
    print("\nüîë Verificando credenciales...")
    
    # Verificar archivo .env
    if os.path.exists('.env'):
        print("   ‚úÖ Archivo .env encontrado")
        
        # Leer archivo .env
        try:
            with open('.env', 'r', encoding='utf-8') as f:
                contenido = f.read()
            
            # Verificar credenciales
            if 'TU_ACCOUNT_SID_AQUI' in contenido:
                print("   ‚ö†Ô∏è  Credenciales no configuradas (usando placeholders)")
                return False
            elif 'TWILIO_ACCOUNT_SID=' in contenido:
                print("   ‚úÖ Credenciales configuradas")
                return True
            else:
                print("   ‚ö†Ô∏è  Formato de credenciales desconocido")
                return False
        except Exception as e:
            print(f"   ‚ùå Error leyendo .env: {e}")
            return False
    else:
        print("   ‚ö†Ô∏è  Archivo .env no encontrado (modo demo)")
        return False

def mostrar_resumen(archivos_ok, directorios_ok, duplicados_ok, config_ok, deps_ok, creds_ok):
    """Mostrar resumen de la verificaci√≥n"""
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE VERIFICACI√ìN")
    print("=" * 60)
    
    print(f"\nüìÅ Archivos principales: {'‚úÖ OK' if archivos_ok else '‚ùå ERROR'}")
    print(f"üìÇ Directorios: {'‚úÖ OK' if directorios_ok else '‚ùå ERROR'}")
    print(f"üîç Archivos duplicados: {'‚úÖ OK' if duplicados_ok else '‚ö†Ô∏è  DUPLICADOS ENCONTRADOS'}")
    print(f"‚öôÔ∏è  Configuraci√≥n: {'‚úÖ OK' if config_ok else '‚ö†Ô∏è  INCOMPLETA'}")
    print(f"üì¶ Dependencias: {'‚úÖ OK' if deps_ok else '‚ùå ERROR'}")
    print(f"üîë Credenciales: {'‚úÖ CONFIGURADAS' if creds_ok else '‚ö†Ô∏è  NO CONFIGURADAS (modo demo)'}")
    
    # Estado general
    if archivos_ok and directorios_ok and deps_ok:
        if creds_ok:
            print("\nüéâ ¬°INSTALACI√ìN COMPLETA Y FUNCIONAL!")
            print("   El sistema est√° listo para usar con credenciales reales.")
        else:
            print("\n‚úÖ ¬°INSTALACI√ìN COMPLETA!")
            print("   El sistema funcionar√° en modo demo.")
            print("   Para usar credenciales reales, ejecuta: python configurar_credenciales.py")
    else:
        print("\n‚ùå INSTALACI√ìN INCOMPLETA")
        print("   Revisa los errores anteriores y ejecuta: python instalar_en_nueva_computadora.py")
    
    print("\nüìã Pr√≥ximos pasos:")
    if archivos_ok and directorios_ok and deps_ok:
        print("   1. Ejecutar: python SISTEMA_UNIFICADO_FINAL.py")
        print("   2. Abrir navegador en: http://localhost:5000")
        if not creds_ok:
            print("   3. Configurar credenciales: python configurar_credenciales.py")
    else:
        print("   1. Ejecutar: python instalar_en_nueva_computadora.py")
        print("   2. Seguir las instrucciones del instalador")

def main():
    """Funci√≥n principal"""
    mostrar_banner()
    
    # Verificaciones
    archivos_ok = verificar_archivos_principales()
    directorios_ok = verificar_directorios()
    duplicados_ok = verificar_archivos_duplicados()
    config_ok = verificar_archivos_configuracion()
    deps_ok = verificar_dependencias()
    creds_ok = verificar_credenciales()
    
    # Mostrar resumen
    mostrar_resumen(archivos_ok, directorios_ok, duplicados_ok, config_ok, deps_ok, creds_ok)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå Verificaci√≥n cancelada por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        sys.exit(1)
